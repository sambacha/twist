{"version":3,"sources":["Spinner.js","twists/paraswap.ts","twists/oneInch.ts","twists/totle.ts","twists/dexag.ts","twists/ZeroEx.ts","twists/utils.ts","twists/index.ts","utils.ts","TransactionButton.js","gas.js","index.js"],"names":["spinning","react_default","a","createElement","version","viewBox","width","height","fill","opacity","d","attributeName","type","from","to","dur","repeatCount","Spinner","Box","align","justify","PARASWAP_BASE_URL","Paraswap","constructor","network","this","tokensReady","fetchTokens","_this","Object","asyncToGenerator","regenerator_default","mark","_callee","tokensResponse","wrap","_context","prev","next","axios","get","concat","then","resp","data","sent","abrupt","tokens","map","t","objectSpread2","address","toLowerCase","stop","_fetchParaswapPrices","sourceToken","destinationToken","sourceAmount","fetchQuote","quoteRequest","_this2","_callee2","paraswapPrices","_context2","destinationAmount","priceRoute","amount","fetchTrade","userAddress","slippage","_this3","_callee3","bestPrice","slippageCalc","newDestinationAmount","transactionRequest","transactionResponse","value","_context3","bn","div","toString","srcToken","destToken","srcAmount","destAmount","referrer","payTo","post","ONE_INCH_BASE_URL","OneInch","Error","tokenResponse","_","values","quote","toTokenAmount","query","fromTokenAddress","toTokenAddress","fromAddress","disableEstimate","qs","stringify","TOTLE_BASE_URL","buildTotleRequest","includeTransaction","swaps","sourceAsset","destinationAsset","maxExecutionSlippagePercent","config","strategy","main","backup","skipBalanceChecks","transactions","apiKey","buildTotleQuoteRequest","swap","maxMarketSlippagePercent","Totle","_fetchTotleQuote","_fetchTotleTrade","totleRequest","_callee4","_context4","response","summary","_callee5","_quote$response$trans","_context5","find","tx","DEXAG_BASE_URL","DexAg","fetchDexagQuote","sourceSymbol","destinationSymbol","sourceAmountFormatted","destinationAmountFormatted","Number","price","fetchDexagTrade","limitAmount","_yield$axios$get$then","_yield$axios$get$then2","trade","metadata","source","getTokenSymbolFromAddress","tokenAddress","token","symbol","getAtomicAmountFromDisplayAmount","_tokens$find","decimals","times","Math","pow","getDisplayAmountFromAtomicAmount","_tokens$find2","_this4","_callee6","_context6","_this5","_callee7","_yield$_this5$fetchDe","_context7","ZERO_EX_BASE_URL","ZeroEx","records","queryString","sellToken","buyToken","sellAmount","buyAmount","t0","error","slippagePercentage","ethAddressByTwist","paraswap","oneInch","totle","dexag","zeroEx","normalizeRequestTokens","aggKey","fixEth","normalizeResponseTokens","approveToken","spender","signer","options","getERC20Contract","approve","TOKEN_APPROVAL_AMOUNT","ETH","TwistTwist","twists","Dexag","processTokensReadyPromises","keys","tokensArray","tokensCleaned","tokenAddressesArray","commonAddresses","commonTokens","combinedTokens","Promise","all","_ref","_x","apply","arguments","union","compact","flatten","filter","uniqBy","validateRequestTokensForAgg","fetchTrades","web3","trades","approvals","_ref2","startTime","normalizedRequest","quoteResponse","Date","now","fetchTime","twist","_x2","checkApprovals","i","approvalNeeded","provider","approvalsNeeded","ethers","Web3Provider","currentProvider","getSigner","_ref3","N","getContractAddressesForChainOrThrow","erc20Proxy","checkApproval","_x3","fetchQuotes","_callee9","_context9","_ref4","_callee8","_context8","_x4","getTokenAddressFromSymbol","tokenSymbol","dividedBy","toFixed","addMarkupToQuotes","quotes","highestDestinationAmount","reduce","agg","markupPercentage","markup","EXPONENTIAL_AT","TransactionButton","label","transactionFn","_useState","useState","_useState2","slicedToArray","pending","setPending","_useState3","_useState4","completed","setCompleted","Fragment","Text","Button","onClick","catch","disabled","GAS_URL","gas","settings","ready","pollGasSettings","setInterval","fast","fastest","average","safeLow","resolve","reject","fetch","method","mode","ok","statusText","json","mapValues","v","getGasSettingsForTransaction","setting","gasLimit","gwei","gasPrice","utils","parseUnits","toNumber","Twist","amountDefault","fromDefault","toDefault","slippageDefault","gasSetting","App","walletAddress","setWalletAddress","setSlippage","_useState5","_useState6","setWeb3","_useState7","_useState8","walletError","setWalletError","_useState9","_useState10","setQuotes","_useState11","_useState12","setTokens","_useState13","_useState14","fetchingQuotes","setFetchingQuotes","_useState15","_useState16","fetchingTokens","setFetchingTokens","_useState17","_useState18","errorFetchingQuotes","setErrorFetchingQuotes","_useState19","_useState20","errorFetchingTokens","setErrorFetchingTokens","_useState21","_useState22","fromSymbol","setFromSymbol","_useState23","_useState24","toSymbol","setToSymbol","_useState25","_useState26","fromAmount","setFromAmount","_useState27","_useState28","sufficientBalance","setSufficientBalance","_fetchQuotes","balance","balanceFormatted","quotesPromise","eth","getBalance","getERC20BalanceOf","t1","message","useEffect","window","ethereum","enable","Web3","err","e","tokenSymbols","columns","property","primary","header","sortable","render","datum","size","src_TransactionButton","_yield$gas$getGasSett","approvalTx","approvalPromise","wait","_yield$gas$getGasSett2","txObject","result","sendTransaction","pad","direction","Heading","textAlign","src_Spinner","FormField","htmlFor","TextInput","id","placeholder","onChange","target","onSelect","event","suggestion","toUpperCase","suggestions","includes","length","margin","DataTable","sortBy","reverse","rootElement","document","getElementById","myTheme","global","font","family","colors","brand","focus","Index","Grommet","theme","ReactDOM"],"mappings":"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","file":"static/js/main.ba9dd29f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Box } from \"grommet\";\n\nconst spinning = (\n  <svg\n    version=\"1.1\"\n    viewBox=\"0 0 32 32\"\n    width=\"28px\"\n    height=\"28px\"\n    fill=\"#2b71ff\"\n  >\n    <path\n      opacity=\".25\"\n      d=\"M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4\"\n    />\n    <path d=\"M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z\">\n      <animateTransform\n        attributeName=\"transform\"\n        type=\"rotate\"\n        from=\"0 16 16\"\n        to=\"360 16 16\"\n        dur=\"0.8s\"\n        repeatCount=\"indefinite\"\n      />\n    </path>\n  </svg>\n);\n\nexport const Spinner = () => (\n  <Box align=\"center\" justify=\"center\">\n    {spinning}\n  </Box>\n);\n\nexport default Spinner;\n","import axios from \"axios\";\nimport bn from \"bignumber.js\";\nimport {\n  QuoteRequest,\n  QuoteResponse,\n  Token,\n  TradeRequest,\n  TradeResponse\n} from \"./types\";\n\nconst PARASWAP_BASE_URL = \"https://paraswap.io/api/v1\";\n\n// fetchPrices types\n\ninterface Route {\n  exchange: string;\n  percent: string;\n  srcAmount: string;\n  amount: string;\n  data: {\n    exchange: string;\n    tokenFrom: string;\n    tokenTo: string;\n  };\n}\n\ninterface Other {\n  exchange: string;\n  rate: string;\n  unit: string;\n}\n\ninterface ParaswapPricesResponse {\n  priceRoute: {\n    amount: string;\n    bestRoute: Route[];\n    others: Other[];\n  };\n}\n\ninterface TransactionRequest {\n  priceRoute: any;\n  srcToken: string;\n  destToken: string;\n  srcAmount: string;\n  destAmount: string;\n  userAddress: string;\n  payTo: string;\n  referrer: string;\n}\n\nclass Paraswap {\n  tokensReady: Promise<Token[]>;\n  network: number;\n  constructor(network: number) {\n    this.network = network;\n    this.tokensReady = this.fetchTokens();\n  }\n  async fetchTokens(): Promise<Token[]> {\n    const tokensResponse: { tokens: Token[] } = await axios\n      .get(`${PARASWAP_BASE_URL}/tokens/${this.network}`)\n      .then(resp => resp.data);\n\n    return tokensResponse.tokens.map(t => ({\n      ...t,\n      address: t.address.toLowerCase()\n    }));\n  }\n  _fetchParaswapPrices({\n    sourceToken,\n    destinationToken,\n    sourceAmount\n  }: QuoteRequest): Promise<ParaswapPricesResponse> {\n    return axios\n      .get(\n        `${PARASWAP_BASE_URL}/prices/${\n          this.network\n        }/${sourceToken}/${destinationToken}/${sourceAmount}`\n      )\n      .then(resp => resp.data);\n  }\n  async fetchQuote(quoteRequest: QuoteRequest): Promise<QuoteResponse> {\n    const { sourceToken, destinationToken, sourceAmount } = quoteRequest;\n\n    const paraswapPrices = await this._fetchParaswapPrices({\n      sourceToken,\n      destinationToken,\n      sourceAmount\n    });\n\n    return {\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      destinationAmount: paraswapPrices.priceRoute.amount\n    };\n  }\n  async fetchTrade({\n    sourceToken,\n    destinationToken,\n    sourceAmount,\n    userAddress,\n    slippage\n  }: TradeRequest): Promise<TradeResponse> {\n    const bestPrice = await this._fetchParaswapPrices({\n      sourceToken,\n      destinationToken,\n      sourceAmount\n    });\n\n    const slippageCalc = 1 + slippage / 100;\n    const newDestinationAmount = new bn(bestPrice.priceRoute.amount)\n      .div(slippageCalc)\n      .toString();\n    const transactionRequest: TransactionRequest = {\n      priceRoute: bestPrice.priceRoute,\n      srcToken: sourceToken,\n      destToken: destinationToken,\n      srcAmount: sourceAmount,\n      destAmount: newDestinationAmount,\n      userAddress,\n      referrer: \"airswap.io\",\n      payTo: \"\"\n    };\n    const transactionResponse = await axios\n      .post(\n        `${PARASWAP_BASE_URL}/transactions/${this.network}`,\n        transactionRequest\n      )\n      .then(resp => resp.data);\n    const { from, to, value, data } = transactionResponse;\n    return {\n      from,\n      to,\n      value,\n      data,\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      destinationAmount: bestPrice.priceRoute.amount\n    };\n  }\n}\n\nexport default Paraswap;\n","import _ from \"lodash\";\nimport axios from \"axios\";\nimport qs from \"query-string\";\n\nimport {\n  QuoteRequest,\n  QuoteResponse,\n  TradeRequest,\n  TradeResponse\n} from \"./types\";\n\nconst ONE_INCH_BASE_URL = \"https://api.1inch.exchange/v1.1\";\n\n// fetchTokens types\ninterface Token {\n  decimals: number;\n  symbol: string;\n  address: string;\n}\n\ninterface TokenResponse {\n  [key: string]: Token;\n}\n\n// fetchQuote types\n\ninterface OneInchQuote {\n  fromToken: Token;\n  toToken: Token;\n  toTokenAmount: string;\n  fromTokenAmount: string;\n  exchanges: Array<{ name: string; part: number }>;\n}\n\ninterface OneInchSwapQuote {\n  fromToken: Token;\n  toToken: Token;\n  toTokenAmount: string;\n  fromTokenAmount: string;\n  exchanges: Array<{ name: string; part: number }>;\n  from: string;\n  to: string;\n  data: string;\n  value: string;\n}\n\nclass OneInch {\n  tokensReady: Promise<Token[]>;\n  constructor(network: number) {\n    if (network !== 1) {\n      throw new Error(\"only mainnet is supported\");\n    }\n    this.tokensReady = this.fetchTokens();\n  }\n  async fetchTokens(): Promise<Token[]> {\n    const tokenResponse: TokenResponse = await axios\n      .get(`${ONE_INCH_BASE_URL}/tokens`)\n      .then(resp => resp.data);\n    return _.values(tokenResponse).map(t => ({\n      ...t,\n      address: t.address.toLowerCase()\n    }));\n  }\n  async fetchQuote(quoteRequest: QuoteRequest): Promise<QuoteResponse> {\n    const { sourceToken, destinationToken, sourceAmount } = quoteRequest;\n    const quote: OneInchQuote = await axios\n      .get(\n        `${ONE_INCH_BASE_URL}/quote?fromTokenAddress=${sourceToken}&toTokenAddress=${destinationToken}&amount=${sourceAmount}&disableEstimate=false&slippage=1`\n      )\n      .then(resp => resp.data);\n\n    return {\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      destinationAmount: quote.toTokenAmount\n    };\n  }\n  async fetchTrade({\n    sourceToken,\n    destinationToken,\n    sourceAmount,\n    userAddress,\n    slippage\n  }: TradeRequest): Promise<TradeResponse> {\n    const query = {\n      fromTokenAddress: sourceToken,\n      toTokenAddress: destinationToken,\n      amount: sourceAmount,\n      fromAddress: userAddress,\n      slippage,\n      disableEstimate: true\n    };\n    const quote: OneInchSwapQuote = await axios\n      .get(`${ONE_INCH_BASE_URL}/swapQuote?${qs.stringify(query)}`)\n      .then(resp => resp.data);\n\n    const { to, data, value, toTokenAmount } = quote;\n\n    return {\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      destinationAmount: toTokenAmount,\n      to,\n      data,\n      value,\n      from: userAddress\n    };\n  }\n}\n\nexport default OneInch;\n","import _ from \"lodash\";\nimport axios from \"axios\";\nimport {\n  QuoteRequest,\n  QuoteResponse,\n  Token,\n  TradeRequest,\n  TradeResponse\n} from \"./types\";\n\nconst TOTLE_BASE_URL = \"https://api.totle.com\";\n\ninterface TokenResponse {\n  [key: string]: Token;\n}\n\n// fetchQuote types\n\ninterface TotleQuoteRequest extends QuoteRequest {\n  includeTransaction: boolean;\n  slippage?: number;\n  userAddress?: string;\n}\n\ninterface TotleTradeOrder {\n  splitPercentage: string;\n  sourceAsset: Token;\n  sourceAmount: string;\n  destinationAsset: Token;\n  destinationAmount: string;\n  rate: string;\n  fee: {\n    amount: string;\n    percent: string;\n    asset: Token;\n  };\n  exchange: {\n    id: number;\n    name: string;\n  };\n}\n\ninterface TotleTrade {\n  sourceAsset: Token;\n  sourceAmount: string;\n  destinationAsset: Token;\n  destinationAmount: string;\n  rate: string;\n  orders: Array<TotleTradeOrder>;\n  runnerUpOrders: [];\n}\n\ninterface TotleQuoteSummary {\n  sourceAsset: {\n    address: string;\n    symbol: string;\n    decimals: string;\n  };\n  sourceAmount: string;\n  destinationAsset: {\n    address: string;\n    symbol: string;\n    decimals: string;\n  };\n  destinationAmount: string;\n  rate: string;\n  path: Array<Token>;\n  guaranteedRate: string;\n  market: {\n    rate: string;\n    slippage: string;\n  };\n  trades: Array<TotleTrade>;\n}\n\ninterface TotleQuote {\n  success: boolean;\n  response: {\n    id: string;\n    summary: Array<TotleQuoteSummary>;\n    expiration: {\n      blockNumber: number;\n      estimatedTimestamp: number;\n    };\n    transactions: any;\n  };\n}\n\ninterface TotleTradeRequest extends TradeRequest {\n  includeTransaction: boolean\n}\n\ninterface TotleQuoteRequest extends QuoteRequest {\n  includeTransaction: boolean\n}\n\nfunction buildTotleRequest({\n  sourceToken,\n  destinationToken,\n  sourceAmount,\n  includeTransaction,\n  slippage,\n  userAddress\n}: TotleTradeRequest) {\n  return {\n    swaps: [\n      {\n        sourceAsset: sourceToken,\n        destinationAsset: destinationToken,\n        sourceAmount: sourceAmount,\n        // maxMarketSlippagePercent: \"10\",\n        maxExecutionSlippagePercent: `${slippage}`\n      }\n    ],\n    config: {\n      strategy: {\n        main: \"curves\",\n        backup: \"curves\"\n      },\n      skipBalanceChecks: false,\n      transactions: includeTransaction\n    },\n    address: userAddress,\n    apiKey: \"41a14d82-36b0-457e-8c16-b86f2f19d094\"\n  };\n}\n\nfunction buildTotleQuoteRequest({\n  sourceToken,\n  destinationToken,\n  sourceAmount,\n  includeTransaction\n}: TotleQuoteRequest) {\n  return {\n    swap: {\n      sourceAsset: sourceToken,\n      destinationAsset: destinationToken,\n      sourceAmount: sourceAmount,\n      maxMarketSlippagePercent: \"10\",\n      maxExecutionSlippagePercent: \"3\"\n    },\n    config: {\n      transactions: includeTransaction\n    }\n  };\n}\n\nclass Totle {\n  tokensReady: Promise<Token[]>;\n  constructor(network: number) {\n    if (network !== 1) {\n      throw new Error(\"only mainnet is supported\");\n    }\n    this.tokensReady = this.fetchTokens();\n  }\n  async fetchTokens(): Promise<Token[]> {\n    const tokenResponse = await axios\n      .get(`${TOTLE_BASE_URL}/tokens`)\n      .then(resp => resp.data);\n\n    return tokenResponse.tokens.map((t: Token) => ({\n      ...t,\n      address: t.address.toLowerCase()\n    }));\n  }\n  async _fetchTotleQuote({\n    sourceToken,\n    destinationToken,\n    sourceAmount,\n    includeTransaction\n  }: TotleQuoteRequest): Promise<TotleQuote> {\n    return await axios\n      .post(\n        \"https://api.totle.com/swap\",\n        buildTotleQuoteRequest({\n          sourceToken,\n          destinationToken,\n          sourceAmount,\n          includeTransaction\n        })\n      )\n      .then(resp => resp.data);\n  }\n  async _fetchTotleTrade({\n    sourceToken,\n    destinationToken,\n    sourceAmount,\n    includeTransaction,\n    slippage,\n    userAddress\n  }: TotleTradeRequest): Promise<TotleQuote> {\n    const totleRequest = buildTotleRequest({\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      includeTransaction,\n      userAddress,\n      slippage\n    });\n\n    return await axios\n      .post(\"https://api.totle.com/swap\", totleRequest)\n      .then(resp => resp.data);\n  }\n  async fetchQuote({\n    sourceToken,\n    destinationToken,\n    sourceAmount\n  }: QuoteRequest): Promise<QuoteResponse> {\n    const quote: TotleQuote = await this._fetchTotleQuote({\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      includeTransaction: false\n    });\n\n    return {\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      destinationAmount: quote.response.summary[0].destinationAmount\n    };\n  }\n  async fetchTrade({\n    sourceToken,\n    destinationToken,\n    sourceAmount,\n    userAddress,\n    slippage\n  }: TradeRequest): Promise<TradeResponse> {\n    const quote: TotleQuote = await this._fetchTotleTrade({\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      includeTransaction: true,\n      slippage,\n      userAddress\n    });\n\n    const { to, data, value } = quote.response.transactions.find(\n      (t:any) => t.type === \"swap\"\n    ).tx;\n\n    return {\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      destinationAmount: quote.response.summary[0].destinationAmount,\n      from: userAddress,\n      to,\n      data,\n      value\n    };\n  }\n}\n\nexport default Totle;\n","// @ts-nocheck\nimport axios from \"axios\";\nimport {\n  QuoteRequest,\n  QuoteResponse,\n  TradeRequest,\n  TradeResponse\n} from \"./types\";\nimport bn from \"bignumber.js\";\n\nconst DEXAG_BASE_URL = \"https://api-v2.dex.ag\";\n\n// fetchTokens types\ninterface Token {\n  decimals: number;\n  symbol: string;\n  address: string;\n}\n// fetchQuote types\n\ninterface DexagQuote {\n  dex: string;\n  price: string;\n  pair: {\n    base: string;\n    quote: string;\n  };\n  liquidity: {\n    [key: string]: number;\n  };\n}\n\nconst x = {\n  trade: {\n    to: \"0x745DAA146934B27e3f0b6bff1a6e36b9B90fb131\",\n    data:\n      \"0x5d46ec34000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000006300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b7550000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4cb3c28c7000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000745daa146934b27e3f0b6bff1a6e36b9b90fb131800000000000016c889a28c160ce0422bb9138ff1d4e482740000000000000000000000000000000000000000000000000000000000000000dbd89cdc19d4ef800000000000000000000000092c1f48ad7ef2ae00801620325af996f843293a3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000\",\n    value: \"100000000000000\"\n  },\n  metadata: {\n    source: {\n      dex: \"ag\",\n      price: \"207.0869659999996272\",\n      liquidity: {\n        kyber: 100\n      }\n    },\n    query: {\n      from: \"ETH\",\n      to: \"USDC\",\n      fromAmount: \"0.0001\",\n      limitAmount: \"0.00009900990099009902\",\n      dex: \"ag\"\n    }\n  }\n};\n\ninterface DexagTrade {\n  trade: {\n    to: string;\n    data: string;\n    value: string;\n  };\n  metadata: {\n    source: {\n      dex: string;\n      price: string;\n      liquidity: {\n        [key: string]: number;\n      };\n    };\n    query: {\n      from: string;\n      to: string;\n      fromAmount: string;\n      limitAmount: string;\n      dex: string;\n    };\n  };\n}\n\nclass DexAg {\n  tokensReady: Promise<Token[]>;\n  constructor(network: number) {\n    if (network !== 1) {\n      throw new Error(\"only mainnet is supported\");\n    }\n    this.tokensReady = this.fetchTokens();\n  }\n  fetchTokens(): Promise<Token[]> {\n    return axios\n      .get(`${DEXAG_BASE_URL}/token-list-full`)\n      .then(resp =>\n        resp.data.map((t:any) => ({ ...t, address: t.address.toLowerCase() }))\n      );\n  }\n  async fetchDexagQuote({\n    sourceSymbol,\n    destinationSymbol,\n    sourceAmountFormatted\n  }: any) {\n    let query = `${DEXAG_BASE_URL}/price?from=${sourceSymbol}&to=${destinationSymbol}&fromAmount=${sourceAmountFormatted}&dex=ag`;\n\n    const quote: DexagQuote = await axios.get(query).then(resp => resp.data);\n\n    const destinationAmountFormatted =\n      sourceAmountFormatted * Number(quote.price);\n    return {\n      sourceSymbol,\n      destinationSymbol,\n      sourceAmountFormatted,\n      destinationAmountFormatted\n    };\n  }\n  async fetchDexagTrade({\n    sourceSymbol,\n    destinationSymbol,\n    sourceAmountFormatted,\n    slippage\n  }: any) {\n    const limitAmount = Number(sourceAmountFormatted) / (1 + slippage / 100);\n    let query = `${DEXAG_BASE_URL}/trade?from=${sourceSymbol}&to=${destinationSymbol}&fromAmount=${sourceAmountFormatted}&limitAmount=${limitAmount}&dex=ag`;\n\n    const {\n      trade: { to, data, value },\n      metadata: {\n        source: { price }\n      }\n    }: DexagTrade = await axios.get(query).then(resp => resp.data);\n\n    const destinationAmountFormatted = sourceAmountFormatted * Number(price);\n    return {\n      sourceSymbol,\n      destinationSymbol,\n      sourceAmountFormatted,\n      destinationAmountFormatted,\n      to,\n      data,\n      value\n    };\n  }\n  async getTokenSymbolFromAddress(tokenAddress: string) {\n    const tokens = await this.tokensReady;\n    const token = tokens.find(\n      ({ address }) => address.toLowerCase() === tokenAddress.toLowerCase()\n    );\n    if (!token) {\n      throw new Error(`Token ${tokenAddress} not supported`);\n    }\n    return token.symbol;\n  }\n  async getAtomicAmountFromDisplayAmount(amount: string, tokenAddress: string): Promise<string> {\n    const tokens = await this.tokensReady;\n    // @ts-ignore\n    const { decimals } = tokens.find(\n      ({ address }) => address.toLowerCase() === tokenAddress.toLowerCase()\n    );\n    return new bn(amount).times(10 ** decimals).toString();\n  }\n  async getDisplayAmountFromAtomicAmount(amount: string, tokenAddress: string): Promise<string> {\n    const tokens = await this.tokensReady;\n    // @ts-ignore\n    const { decimals } = tokens.find(\n      ({ address }) => address.toLowerCase() === tokenAddress.toLowerCase()\n    );\n    return (Number(amount) / 10 ** decimals).toString();\n  }\n  async fetchQuote(quoteRequest: QuoteRequest): Promise<QuoteResponse> {\n    const { sourceToken, destinationToken, sourceAmount } = quoteRequest;\n\n    const sourceSymbol = await this.getTokenSymbolFromAddress(sourceToken);\n    const destinationSymbol = await this.getTokenSymbolFromAddress(\n      destinationToken\n    );\n    const sourceAmountFormatted = await this.getDisplayAmountFromAtomicAmount(\n      sourceAmount,\n      sourceToken\n    );\n    const quote = await this.fetchDexagQuote({\n      sourceSymbol,\n      destinationSymbol,\n      sourceAmountFormatted\n    });\n    const destinationAmount = await this.getAtomicAmountFromDisplayAmount(\n      quote.destinationAmountFormatted.toString(),\n      destinationToken\n    );\n\n    return {\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      destinationAmount\n    };\n  }\n  async fetchTrade({\n    sourceToken,\n    destinationToken,\n    sourceAmount,\n    userAddress,\n    slippage\n  }: TradeRequest): Promise<TradeResponse> {\n    const sourceSymbol = await this.getTokenSymbolFromAddress(sourceToken);\n    const destinationSymbol = await this.getTokenSymbolFromAddress(\n      destinationToken\n    );\n    const sourceAmountFormatted = await this.getDisplayAmountFromAtomicAmount(\n      sourceAmount,\n      sourceToken\n    );\n    const {\n      destinationAmountFormatted,\n      to,\n      data,\n      value\n    } = await this.fetchDexagTrade({\n      sourceSymbol,\n      destinationSymbol,\n      sourceAmountFormatted,\n      slippage\n    });\n\n    const destinationAmount = await this.getAtomicAmountFromDisplayAmount(\n      destinationAmountFormatted.toString(),\n      destinationToken\n    );\n\n    return {\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      destinationAmount,\n      from: userAddress,\n      to,\n      data,\n      value\n    };\n  }\n}\n\nexport default DexAg;\n","import axios from \"axios\";\nimport qs from \"query-string\";\nimport {\n  QuoteRequest,\n  QuoteResponse,\n  TradeRequest,\n  TradeResponse\n} from \"./types\";\n\nconst ZERO_EX_BASE_URL = \"https://api.0x.org\";\n\n// fetchTokens types\ninterface Token {\n  decimals: number;\n  symbol: string;\n  address: string;\n}\n\ninterface TokenResponse {\n  records: Token[];\n}\n\n// fetchQuote types\ninterface ZeroExQuote {\n  price: string;\n  guaranteedPrice: string;\n  to: string;\n  data: string;\n  value: string;\n  gas: string;\n  gasPrice: string;\n  protocolFee: string;\n  buyTokenAddress: string;\n  sellTokenAddress: string;\n  buyAmount: string;\n  sellAmount: string;\n  sources: Array<{ name: string; proportion: string }>;\n}\n\nclass ZeroEx {\n  tokensReady: Promise<Token[]>;\n  constructor(network: number) {\n    if (network !== 1) {\n      throw new Error(\"only mainnet is supported\");\n    }\n    this.tokensReady = this.fetchTokens();\n  }\n  async fetchTokens(): Promise<Token[]> {\n    const tokenResponse: TokenResponse = await axios\n      .get(`${ZERO_EX_BASE_URL}/swap/v0/tokens`)\n      .then(resp => resp.data);\n\n    return tokenResponse.records.map(t => ({\n      ...t,\n      address: t.address.toLowerCase()\n    }));\n  }\n  async fetchQuote(quoteRequest: QuoteRequest): Promise<QuoteResponse> {\n    const { sourceToken, destinationToken, sourceAmount } = quoteRequest;\n\n    try {\n      const queryString = qs.stringify({\n        sellToken: sourceToken,\n        buyToken: destinationToken,\n        sellAmount: sourceAmount\n      });\n      const quote: ZeroExQuote = await axios\n        .get(`${ZERO_EX_BASE_URL}/swap/v0/quote?${queryString}`)\n        .then(resp => resp.data);\n\n      return {\n        sourceToken,\n        destinationToken,\n        sourceAmount,\n        destinationAmount: quote.buyAmount\n      };\n    } catch (error) {\n      return {\n        sourceToken,\n        destinationToken,\n        sourceAmount,\n        destinationAmount: \"0\",\n        error\n      };\n    }\n  }\n  async fetchTrade({\n    sourceToken,\n    destinationToken,\n    sourceAmount,\n    userAddress,\n    slippage\n  }: TradeRequest): Promise<TradeResponse> {\n    const queryString = qs.stringify({\n      sellToken: sourceToken,\n      buyToken: destinationToken,\n      sellAmount: sourceAmount,\n      // takerAddress: userAddress,\n      slippagePercentage: slippage / 100 // 0x defines slippage as a decimal between 0 and 1\n    });\n    const quote: ZeroExQuote = await axios\n      .get(`${ZERO_EX_BASE_URL}/swap/v0/quote?${queryString}`)\n      .then(resp => resp.data);\n\n    const { to, data, value } = quote;\n\n    return {\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      destinationAmount: quote.buyAmount,\n      from: userAddress,\n      to,\n      data,\n      value\n    };\n  }\n}\n\nexport default ZeroEx;\n","const ethAddressByTwist: { [key: string]: string } = {\n  paraswap: \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\n  oneInch: \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\n  totle: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n  dexag: \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\n  zeroEx: \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\n};\n\nfunction normalizeRequestTokens({ sourceToken, destinationToken }: { sourceToken: string, destinationToken: string }, aggKey: string) {\n  const fixEth = (address: string) =>\n    address === \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"\n      ? ethAddressByTwist[aggKey]\n      : address;\n\n  return {\n    sourceToken: fixEth(sourceToken),\n    destinationToken: fixEth(destinationToken)\n  };\n}\n\nfunction normalizeResponseTokens({ sourceToken, destinationToken }: { sourceToken: string, destinationToken: string }, aggKey: string) {\n  const fixEth = (address: string) =>\n    address === \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\n      ? \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"\n      : address;\n\n  return {\n    sourceToken: fixEth(sourceToken),\n    destinationToken: fixEth(destinationToken)\n  };\n}\n\nexport { normalizeRequestTokens, normalizeResponseTokens };\n","import { checkApproval, getERC20Contract } from \"airswap.js/src/erc20\";\nimport { TOKEN_APPROVAL_AMOUNT } from \"airswap.js/src/constants\";\nimport * as ethers from \"ethers\";\nimport { getContractAddressesForChainOrThrow } from \"@0x/contract-addresses\";\nimport _ from \"lodash\";\nimport Paraswap from \"./paraswap\";\nimport OneInch from \"./oneInch\";\nimport Totle from \"./totle\";\nimport Dexag from \"./dexag\";\nimport ZeroEx from \"./ZeroEx\";\n\nimport {\n  QuoteRequest,\n  QuoteResponse,\n  Twist,\n  Token,\n  TradeRequest,\n  TradeResponse\n} from \"./types\";\nimport { normalizeRequestTokens, normalizeResponseTokens } from \"./utils\";\nimport Web3 from \"web3\";\n\nfunction approveToken(tokenAddress: string, spender: string, signer: any, options = {}) {\n  const contract = getERC20Contract(tokenAddress, signer);\n  return contract.approve(spender, TOKEN_APPROVAL_AMOUNT, { ...options });\n}\n\ninterface AggregatedQuoteResponse extends QuoteResponse {\n  fetchTime: number;\n  twist: string;\n}\n\ninterface AggregatedTradeResponse extends TradeResponse {\n  fetchTime: number;\n  twist: string;\n}\n\nconst ETH: Token = {\n  symbol: \"ETH\",\n  decimals: 18,\n  address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"\n};\n\nclass TwistTwist {\n  network: number;\n  twists: { [key: string]: Twist };\n  tokensReady: Promise<Token[]>;\n  constructor(network: number) {\n    this.network = network;\n    this.twists = {\n      paraswap: new Paraswap(this.network),\n      oneInch: new OneInch(this.network),\n      totle: new Totle(this.network),\n      dexag: new Dexag(this.network),\n      zeroEx: new ZeroEx(this.network)\n    };\n    this.tokensReady = this.processTokensReadyPromises();\n  }\n  async processTokensReadyPromises(): Promise<Token[]> {\n    const keys = Object.keys(this.twists);\n    const tokensArray = await Promise.all(\n      keys.map(async aggKey => {\n        return this.twists[aggKey].fetchTokens();\n      })\n    );\n\n    const tokensCleaned = tokensArray.map(tokens =>\n      tokens.map(token => ({\n        ...token,\n        address: token.address.toLowerCase()\n      }))\n    );\n\n    const tokenAddressesArray: Array<Array<string>> = tokensCleaned.map(tokens =>\n      tokens.map(token => token.address)\n    );\n\n    const commonAddresses: Array<string> = _.union(...tokenAddressesArray);\n    const commonTokens: Array<Token> = _.compact(commonAddresses.map(address => {\n      return _.find(_.flatten(tokensCleaned), t => t.address === address);\n    }))\n\n    const combinedTokens = [ETH, ...commonTokens.filter(t => t.symbol !== \"ETH\")]\n\n    return _.uniqBy(\n      combinedTokens,\n      \"address\"\n    );\n  }\n  async validateRequestTokensForAgg({ sourceToken, destinationToken }: { sourceToken: string, destinationToken: string }, aggKey: string) {\n    const tokens = await this.twists[aggKey].tokensReady;\n\n    if (!_.find(tokens, { address: sourceToken })) {\n      throw new Error(`Source token not supported`);\n    } else if (!_.find(tokens, { address: destinationToken })) {\n      throw new Error(`Destination token not supported`);\n    }\n  }\n  async fetchTrades(\n    {\n      sourceToken,\n      destinationToken,\n      sourceAmount,\n      userAddress,\n      slippage\n    }: TradeRequest,\n    web3: Web3\n  ): Promise<AggregatedTradeResponse[]> {\n    const keys = Object.keys(this.twists);\n    const trades = await Promise.all(\n      keys.map(async aggKey => {\n        const startTime = Date.now();\n        let quote;\n        try {\n          const normalizedRequest = {\n            sourceAmount,\n            userAddress,\n            slippage,\n            ...normalizeRequestTokens(\n              {\n                sourceToken,\n                destinationToken\n              },\n              aggKey\n            )\n          };\n          await this.validateRequestTokensForAgg(normalizedRequest, aggKey);\n          const quoteResponse = await this.twists[aggKey].fetchTrade(\n            normalizedRequest\n          );\n          quote = {\n            ...quoteResponse,\n            ...normalizeResponseTokens(\n              {\n                sourceToken: quoteResponse.sourceToken,\n                destinationToken: quoteResponse.destinationToken\n              },\n              aggKey\n            )\n          };\n        } catch (error) {\n          quote = {\n            sourceToken,\n            destinationToken,\n            sourceAmount,\n            error\n          };\n        }\n\n        return {\n          ...quote,\n          fetchTime: Date.now() - startTime,\n          twist: aggKey\n        };\n      })\n    );\n    const approvals = await this.checkApprovals(trades, web3);\n\n    return trades.map((trade, i) => ({\n      ...trade,\n      approvalNeeded: approvals[i]\n    }));\n  }\n  async checkApprovals(trades: any, web3: any) {\n    const provider = new ethers.providers.Web3Provider(web3.currentProvider);\n    const signer = provider.getSigner();\n    const approvalsNeeded = await Promise.all(\n      trades.map(async (trade: any) => {\n        if (trade.sourceToken === ETH.address || trade.error) {\n          return null;\n        }\n        const spender = (N => {\n          switch (N) {\n            case \"zeroEx\":\n              return getContractAddressesForChainOrThrow(1).erc20Proxy;\n            case \"totle\":\n              return \"0x74758acfce059f503a7e6b0fc2c8737600f9f2c4\";\n            case \"oneInch\":\n              return \"0xe4c9194962532feb467dce8b3d42419641c6ed2e\";\n            case \"dexag\":\n              return \"0xccaf8533b6822a6c17b1059dda13c168e75544a4\";\n            default:\n              return trade.to;\n          }\n        })(trade.twist);\n\n        const isApproved = await checkApproval(\n          trade.sourceToken,\n          spender,\n          signer\n        );\n\n        if (!isApproved) {\n          return (options = {}) =>\n            approveToken(trade.sourceToken, spender, signer, options);\n        } else {\n          return null;\n        }\n      })\n    );\n    return approvalsNeeded;\n  }\n  async fetchQuotes({\n    sourceToken,\n    destinationToken,\n    sourceAmount\n  }: QuoteRequest): Promise<AggregatedQuoteResponse[]> {\n    const keys = Object.keys(this.twists);\n    return Promise.all(\n      keys.map(async aggKey => {\n        const startTime = Date.now();\n        let quote;\n        try {\n          const normalizedRequest = {\n            sourceAmount,\n            ...normalizeRequestTokens(\n              {\n                sourceToken,\n                destinationToken\n              },\n              aggKey\n            )\n          };\n          await this.validateRequestTokensForAgg(normalizedRequest, aggKey);\n          const quoteResponse = await this.twists[aggKey].fetchQuote(\n            normalizedRequest\n          );\n          quote = {\n            ...quoteResponse,\n            ...normalizeResponseTokens(\n              {\n                sourceToken: quoteResponse.sourceToken,\n                destinationToken: quoteResponse.destinationToken\n              },\n              aggKey\n            )\n          };\n        } catch (error) {\n          quote = {\n            sourceToken,\n            destinationToken,\n            sourceAmount,\n            error\n          };\n        }\n\n        return {\n          ...quote,\n          fetchTime: Date.now() - startTime,\n          twist: aggKey\n        };\n      })\n    );\n  }\n}\n\nexport default TwistTwist;\n","import _ from 'lodash'\nimport bn from \"bignumber.js\";\nimport {QuoteResponse, Token} from \"./twists/types\";\n\nbn.config({ EXPONENTIAL_AT: 1e9 });\n\nexport function getTokenAddressFromSymbol(tokenSymbol: string, tokens: Array<Token>) {\n  return _.get(tokens.find(({ symbol }) => symbol === tokenSymbol), 'address');\n}\n\nexport function getAtomicAmountFromDisplayAmount(amount, tokenAddress, tokens) {\n  const { decimals } = tokens.find(\n    ({ address }) => address.toLowerCase() === tokenAddress.toLowerCase()\n  );\n  return new bn(amount).times(10 ** decimals).toString();\n}\n\nexport function getDisplayAmountFromAtomicAmount(amount, tokenAddress, tokens) {\n  const token = tokens.find(\n    ({ address }) => address.toLowerCase() === tokenAddress.toLowerCase()\n  );\n  const { decimals } = token;\n\n  return new bn(amount).dividedBy(10 ** decimals).toFixed(4);\n}\n\nexport function addMarkupToQuotes(quotes: QuoteResponse[]) {\n  const highestDestinationAmount = quotes.reduce((agg, quote): number => {\n    if (Number(quote.destinationAmount) > agg) {\n      return Number(quote.destinationAmount);\n    } else {\n      return agg;\n    }\n  }, 0);\n  return quotes.map(quote => {\n    const markup =\n      highestDestinationAmount / Number(quote.destinationAmount) - 1;\n    const markupPercentage = (markup * 100).toFixed(2);\n    return {\n      ...quote,\n      markup: `+ ${markupPercentage}%`\n    };\n  });\n}\n","import React, { useState } from \"react\";\nimport Spinner from \"./Spinner\";\n\nimport { Button, Text } from \"grommet\";\n\nconst TransactionButton = ({ label, transactionFn }) => {\n  const [pending, setPending] = useState(false);\n  const [completed, setCompleted] = useState(false);\n  return (\n    <>\n      {completed || pending ? (\n        <Text>\n          {`${pending ? \"Mining\" : \"\"} ${completed ? \"Mined\" : \"\"} ${label}`}\n        </Text>\n      ) : null}\n      {completed || pending ? null : (\n        <Button\n          onClick={() => {\n            setPending(true);\n            transactionFn()\n              .then(() => {\n                setPending(false);\n                setCompleted(true);\n              })\n              .catch(() => {\n                setPending(false);\n              });\n          }}\n          disabled={pending || completed}\n          label={`${pending ? \"Mining\" : \"\"} ${\n            completed ? \"Mined\" : \"\"\n          } ${label}`}\n        />\n      )}\n    </>\n  );\n};\n\nexport default TransactionButton;\n","import ethers from \"ethers\"\nimport _  from \"lodash\"\nimport fetch from \"isomorphic-fetch\"\n\nconst GAS_URL = \"https://ethgasstation.airswap.io/ethgasAPI.json\";\n\nfunction fetchGasSettings() {\n  return new Promise((resolve, reject) => {\n    fetch(GAS_URL, {\n      method: \"get\",\n      mode: \"cors\"\n    })\n      .then(response => {\n        if (!response.ok) {\n          reject(response.statusText);\n        }\n        return response.json();\n      })\n      .then(resolve);\n  });\n}\n\nclass Gas {\n  constructor() {\n    this.settings = {};\n    this.ready = this.pollGasSettings();\n    setInterval(() => this.pollGasSettings(), 60000);\n  }\n  async pollGasSettings() {\n    const settings = await fetchGasSettings();\n    const { fast, fastest, average, safeLow } = settings;\n    this.settings = _.mapValues(\n      { fast, fastest, average, safeLow },\n      v => v / 10\n    );\n    // console.log('updated gas levels', this.settings)\n    return this.settings;\n  }\n  getGasSettingsForTransaction(setting = \"fast\", gasLimit = 300000) {\n    const gwei = this.settings[setting];\n    const gasPrice = ethers.utils.parseUnits(`${gwei}`, \"gwei\").toNumber();\n    return {\n      gasLimit: Number(gasLimit),\n      gasPrice\n    };\n  }\n}\n\nexport default Gas;\n","import _ from \"lodash\";\nimport React, { useState, useEffect } from \"react\";\nimport Spinner from \"./Spinner\";\nimport ReactDOM from \"react-dom\";\nimport { getERC20BalanceOf } from \"airswap.js/src/erc20/contractFunctions\";\n\nimport {\n  Grommet,\n  Box,\n  Heading,\n  DataTable,\n  Text,\n  Button,\n  FormField,\n  TextInput\n} from \"grommet\";\nimport Twist from \"./twists\";\nimport {\n  getAtomicAmountFromDisplayAmount,\n  getDisplayAmountFromAtomicAmount,\n  getTokenAddressFromSymbol,\n  addMarkupToQuotes\n} from \"./utils\";\nimport Web3 from \"web3\";\nimport TransactionButton from \"./TransactionButton\";\nimport Gas from \"./gas\";\n\nconst gas = new Gas();\n\nconst twist = new Twist(1);\n\nconst amountDefault = \"1\";\nconst fromDefault = \"USDC\";\nconst toDefault = \"DAI\";\nconst slippageDefault = 3;\n\nconst gasSetting = \"fast\";\n\nfunction App() {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [slippage, setSlippage] = useState(slippageDefault);\n  const [web3, setWeb3] = useState(null);\n  const [walletError, setWalletError] = useState(\"\");\n  const [quotes, setQuotes] = useState([]);\n  const [tokens, setTokens] = useState([]);\n\n  const [fetchingQuotes, setFetchingQuotes] = useState(false);\n  const [fetchingTokens, setFetchingTokens] = useState(false);\n\n  const [errorFetchingQuotes, setErrorFetchingQuotes] = useState(\"\");\n  const [errorFetchingTokens, setErrorFetchingTokens] = useState(\"\");\n  const [fromSymbol, setFromSymbol] = useState(fromDefault);\n  const [toSymbol, setToSymbol] = useState(toDefault);\n  const [fromAmount, setFromAmount] = useState(amountDefault);\n  const [sufficientBalance, setSufficientBalance] = useState(false);\n\n  useEffect(() => {\n    window.ethereum\n      .enable()\n      .then(([address]) => {\n        setWeb3(new Web3(window.ethereum));\n        setWalletAddress(address);\n      })\n      .catch(err => setWalletError(err.message));\n\n    setFetchingTokens(true);\n    twist.tokensReady\n      .then(tokens => {\n        setTokens(tokens);\n        setFetchingTokens(false);\n      })\n      .catch(e => {\n        setErrorFetchingTokens(e.message);\n        setFetchingTokens(false);\n      });\n  }, []);\n\n  async function fetchQuotes() {\n    setFetchingQuotes(true);\n    setErrorFetchingQuotes(\"\");\n\n    const sourceToken = await getTokenAddressFromSymbol(fromSymbol, tokens);\n    const destinationToken = await getTokenAddressFromSymbol(toSymbol, tokens);\n    const sourceAmount = await getAtomicAmountFromDisplayAmount(\n      fromAmount,\n      sourceToken,\n      tokens\n    );\n    const balance =\n      sourceToken === \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"\n        ? await web3.eth.getBalance(walletAddress)\n        : (await getERC20BalanceOf(sourceToken, walletAddress)).toString();\n\n    const balanceFormatted = getDisplayAmountFromAtomicAmount(\n      balance,\n      sourceToken,\n      tokens\n    );\n    const sufficientBalance = Number(balanceFormatted) >= Number(fromAmount);\n    setSufficientBalance(sufficientBalance);\n\n    const quotesPromise = sufficientBalance\n      ? twist.fetchTrades(\n          {\n            sourceAmount,\n            sourceToken,\n            destinationToken,\n            userAddress: walletAddress,\n            slippage\n          },\n          web3\n        )\n      : twist.fetchQuotes({\n          sourceAmount,\n          sourceToken,\n          destinationToken\n        });\n\n    try {\n      await quotesPromise.then(response =>\n        setQuotes(addMarkupToQuotes(response))\n      );\n    } catch (e) {\n      setFetchingQuotes(false);\n      setErrorFetchingQuotes(e.message);\n    }\n    setFetchingQuotes(false);\n  }\n\n  const tokenSymbols = tokens.map(t => t.symbol);\n\n  const columns = [\n    {\n      property: \"twist\",\n      primary: true,\n      header: \"Twist\"\n    },\n    {\n      property: \"destinationAmount\",\n      header: \"Return Amount\",\n      sortable: true,\n      render: datum => {\n        return datum.error ? (\n          \"N/A\"\n        ) : (\n          <Text>\n            {getDisplayAmountFromAtomicAmount(\n              datum.destinationAmount,\n              datum.destinationToken,\n              tokens\n            )}{\" \"}\n            {_.get(\n              tokens.find(t => datum.destinationToken === t.address),\n              \"symbol\"\n            )}\n          </Text>\n        );\n      }\n    },\n    {\n      property: \"fetchTime\",\n      header: \"Fetch Time (s)\",\n      render: datum => {\n        return datum.error ? \"N/A\" : <Text>{datum.fetchTime / 1000}</Text>;\n      }\n    },\n    {\n      property: \"markup\",\n      header: \"Markup\",\n      render: datum => {\n        return datum.error ? \"N/A\" : <Text>{datum.markup}</Text>;\n      }\n    },\n    {\n      property: \"action\",\n      header: \"Action\",\n      render: datum => {\n        if (!sufficientBalance) {\n          return datum.error ? (\n            <Text size=\"xsmall\">{datum.error.message}</Text>\n          ) : (\n            \"Insufficient Balance\"\n          );\n        }\n        return datum.error ? (\n          <Text size=\"xsmall\">{datum.error.message}</Text>\n        ) : (\n          <>\n            {datum.approvalNeeded ? (\n              <TransactionButton\n                transactionFn={async () => {\n                  const { gasPrice } = await gas.getGasSettingsForTransaction(\n                    gasSetting\n                  );\n                  const approvalTx = await datum.approvalNeeded({ gasPrice });\n                  const approvalPromise = approvalTx.wait();\n                  approvalPromise.then(() => fetchQuotes());\n                  return approvalPromise;\n                }}\n                label=\"Approve Token\"\n              />\n            ) : (\n              <TransactionButton\n                label=\"Trade\"\n                transactionFn={async () => {\n                  const { gasPrice } = await gas.getGasSettingsForTransaction(\n                    gasSetting\n                  );\n                  const txObject = {\n                    from: walletAddress,\n                    to: datum.to,\n                    value: datum.value,\n                    data: datum.data,\n                    gas: 1500000,\n                    gasPrice\n                  };\n                  const result = await web3.eth.sendTransaction(txObject);\n                  return result;\n                }}\n              />\n            )}\n          </>\n        );\n      }\n    }\n  ];\n\n  return (\n    <Box pad=\"large\" justify=\"center\" direction=\"row\">\n      <Box direction=\"column\">\n        <Heading textAlign=\"center\">Twist Twist</Heading>\n        {walletError}\n        {!fetchingTokens ? (\n          <Box align=\"center\" pad=\"large\" direction=\"column\">\n            <FormField label=\"From Amount\" htmlFor=\"from-amount\">\n              <TextInput\n                id=\"from-amount\"\n                placeholder=\"100\"\n                value={fromAmount}\n                onChange={({ target: { value } }) => {\n                  setFromAmount(value);\n                }}\n                onSelect={event => setFromAmount(event.suggestion)}\n              />\n            </FormField>\n\n            <FormField label=\"From Token\" htmlFor=\"from-token\">\n              <TextInput\n                id=\"from-token\"\n                placeholder=\"ETH\"\n                value={fromSymbol}\n                onChange={({ target: { value } }) => {\n                  setFromSymbol(value.toUpperCase());\n                }}\n                onSelect={event => setFromSymbol(event.suggestion)}\n                suggestions={tokenSymbols.filter(t => t.includes(fromSymbol))}\n              />\n            </FormField>\n            <FormField label=\"To Token\" htmlFor=\"token-input\">\n              <TextInput\n                id=\"token-input\"\n                placeholder=\"DAI\"\n                value={toSymbol}\n                onChange={({ target: { value } }) => {\n                  setToSymbol(value.toUpperCase());\n                }}\n                onSelect={event => setToSymbol(event.suggestion)}\n                suggestions={tokenSymbols.filter(t => t.includes(toSymbol))}\n              />\n            </FormField>\n            <FormField label=\"Max Slippage %\" htmlFor=\"slippage\">\n              <TextInput\n                id=\"slippage\"\n                placeholder=\"1\"\n                value={slippage}\n                type=\"number\"\n                onChange={({ target: { value } }) => {\n                  setSlippage(Number(value));\n                }}\n              />\n            </FormField>\n          </Box>\n        ) : (\n          <Box align=\"center\" justify=\"center\" height=\"300px\">\n            <Spinner />\n          </Box>\n        )}\n\n        <Button\n          disabled={!(toSymbol && fromSymbol && fromAmount && tokens.length)}\n          label=\"Fetch Quotes\"\n          primary\n          onClick={() => fetchQuotes()}\n        />\n        <Box align=\"center\" margin=\"medium\">\n          {errorFetchingTokens}\n          {errorFetchingQuotes}\n          {fetchingQuotes && !errorFetchingQuotes ? (\n            <Box>\n              <Spinner />\n            </Box>\n          ) : quotes.length ? (\n            <DataTable\n              data={_.sortBy(quotes, ({ destinationAmount }) =>\n                Number(destinationAmount)\n              ).reverse()}\n              columns={columns}\n              sortable\n            />\n          ) : null}\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\n\nconst myTheme = {\n  global: {\n    font: {\n      family: \"Lato\"\n    },\n    colors: {\n      brand: \"#2b71ff\",\n      focus: \"#2b71ff\"\n    }\n  }\n};\n\nconst Index = () => (\n  <Grommet theme={myTheme}>\n    <App />\n  </Grommet>\n);\n\nReactDOM.render(<Index />, rootElement);\n"],"sourceRoot":""}